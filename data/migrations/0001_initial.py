# Generated by Django 4.1.7 on 2023-03-27 04:20

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CapacitacionCliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estatus_capacitacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'NO INICIADO'), (2, 'EN PROCESO'), (3, 'REALIZADO'), (4, 'ENTREGADO'), (5, 'FACTURADO'), (6, 'PAGADO'), (7, 'CANCELADO')], null=True)),
                ('fecha_solicitud', models.DateField(blank=True, null=True)),
                ('detalle_solicitud', models.CharField(blank=True, max_length=200, null=True)),
                ('fecha_realizacion', models.DateField(blank=True, null=True)),
                ('detalle_realizacion', models.CharField(blank=True, max_length=200, null=True)),
                ('fecha_entrega', models.DateField(blank=True, null=True)),
                ('detalle_entrega', models.CharField(blank=True, max_length=200, null=True)),
                ('fecha_facturado', models.DateField(blank=True, null=True)),
                ('no_factura', models.CharField(blank=True, max_length=200, null=True)),
                ('fecha_pagado', models.DateField(blank=True, null=True)),
                ('detalle_pagado', models.CharField(blank=True, max_length=200, null=True)),
                ('comentarios', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Capacitaciones Cliente',
            },
        ),
        migrations.CreateModel(
            name='CapacitacionPrevia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institucion_empresa', models.CharField(blank=True, max_length=100, null=True)),
                ('curso', models.CharField(blank=True, max_length=100, null=True)),
                ('impartido_recibido', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'IMPARTIDO'), (2, 'RECIBIDO')], null=True)),
                ('eficiencia_terminal', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'INCONCLUSO'), (2, 'CONCLUIDO'), (3, 'CURSANDO'), (4, 'SOLICITUD')], null=True)),
                ('inicio', models.DateField(blank=True, null=True)),
                ('conclusion', models.DateField(blank=True, null=True)),
                ('duracion', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'verbose_name_plural': 'Capacitaciones Previas',
            },
        ),
        migrations.CreateModel(
            name='CarpetaCapacitacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Carpeta Capacitaciones',
            },
        ),
        migrations.CreateModel(
            name='CarpetaClienteGenerales',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reg_estatal', models.CharField(blank=True, max_length=30)),
                ('reg_federal', models.CharField(blank=True, max_length=30)),
                ('rfc', models.CharField(blank=True, max_length=13)),
                ('telefono_1', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('telefono_2', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('telefono_3', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('representante_legal', models.CharField(blank=True, max_length=300)),
                ('encargado_operativo', models.CharField(blank=True, max_length=300)),
                ('encargado_rh', models.CharField(blank=True, max_length=300)),
                ('coordinador', models.CharField(blank=True, max_length=300)),
                ('registro_patronal', models.CharField(blank=True, max_length=30)),
            ],
            options={
                'verbose_name_plural': 'Clientes Generales',
            },
        ),
        migrations.CreateModel(
            name='CarpetaClientePagos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('encargado_pagos', models.CharField(blank=True, max_length=150)),
                ('telefono_oficina', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('telefono_celular', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('email', models.CharField(blank=True, max_length=200)),
                ('rfc', models.CharField(blank=True, max_length=13)),
                ('facturacion_tipo', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'QUINCENAL'), (2, 'MENSUAL'), (3, 'POR EVENTO')])),
                ('revision', models.CharField(blank=True, max_length=50)),
                ('pagos', models.CharField(blank=True, max_length=50)),
                ('factura_subtotal', models.DecimalField(blank=True, decimal_places=2, max_digits=10)),
                ('factura_iva', models.DecimalField(blank=True, decimal_places=2, max_digits=10)),
                ('factura_total', models.DecimalField(blank=True, decimal_places=2, max_digits=10)),
            ],
            options={
                'verbose_name_plural': 'Clientes Pagos',
            },
        ),
        migrations.CreateModel(
            name='CarpetaDependientes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vive_con_familia', models.BooleanField(blank=True, default=False)),
                ('cantidad_dependientes_economicos', models.CharField(blank=True, max_length=3, null=True)),
                ('cantidad_hijos', models.CharField(blank=True, max_length=3, null=True)),
            ],
            options={
                'verbose_name_plural': 'Carpeta Dependientes',
            },
        ),
        migrations.CreateModel(
            name='CarpetaEmpleoAnterior',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Carpeta Empleos Anteriores',
            },
        ),
        migrations.CreateModel(
            name='CarpetaEmpleoAnteriorSeguridadPublica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Carpeta Empresas Anteriores Seguridad Publica',
            },
        ),
        migrations.CreateModel(
            name='CarpetaLaboral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modalidad', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ADMINISTRATIVO'), (2, 'EN LOS BIENES'), (3, 'EN EL TRASLADO DE BIENES'), (4, 'A PERSONAS'), (5, 'MANTENIMIENTO')])),
                ('estatus_empleado', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ACTIVO'), (2, 'BAJA SIN ENTREGAR UNIFORME'), (3, 'BAJA PROCESO COMPLETO'), (4, 'BAJA DEMANDÓ'), (5, 'BAJA DEMANDADO')])),
                ('proceso_racek', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'CONTRATADO'), (2, 'APTO CON RESERVA'), (3, 'NO CONCLUYÓ'), (4, 'CANCELADO'), (5, 'EN EVALUACIÓN'), (6, 'APTO'), (7, 'NO APTO'), (8, 'BAJA')])),
                ('fecha_atencion', models.DateField(blank=True)),
                ('reingreso', models.BooleanField(blank=True, default=False)),
                ('inicio_labores', models.DateField(blank=True)),
                ('visita_domiciliaria', models.BooleanField(blank=True, default=False)),
                ('cedula', models.DateField(blank=True)),
                ('nivel_mando', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'MEDIO'), (2, 'NINGUNO'), (3, 'ALTO')])),
                ('oficina', models.CharField(blank=True, max_length=30)),
                ('especialidad_empleo', models.CharField(blank=True, max_length=35)),
                ('servicio', models.CharField(blank=True, max_length=30)),
                ('rango', models.CharField(blank=True, max_length=30)),
                ('turno', models.CharField(blank=True, max_length=30)),
                ('division', models.CharField(blank=True, max_length=35)),
                ('sueldo', models.DecimalField(blank=True, decimal_places=2, max_digits=7)),
                ('funciones', models.CharField(blank=True, max_length=35)),
                ('evaluacion', models.BooleanField(blank=True, default=False)),
                ('integracion', models.DateField(auto_now=True)),
                ('vigencia', models.DateField(auto_now=True)),
                ('capacitacion', models.BooleanField(blank=True, default=False)),
                ('ultima_actualizacion', models.DateField(auto_now=True)),
                ('impresion', models.BooleanField(blank=True, default=False)),
                ('fecha_impresion', models.DateField(blank=True)),
                ('expediente', models.CharField(blank=True, max_length=25)),
                ('cedula_federal', models.BooleanField(blank=True, default=False)),
                ('fecha_cedula_federal', models.DateField(blank=True)),
                ('cedula_cdmx', models.BooleanField(blank=True, default=False)),
                ('fecha_cedula_cdmx', models.DateField(blank=True)),
                ('evaluacion_federal', models.BooleanField(blank=True, default=False)),
                ('fecha_evaluacion_federal', models.DateField(blank=True)),
                ('evaluacion_cdmx', models.BooleanField(blank=True, default=False)),
                ('fecha_evaluacion_cdmx', models.DateField(blank=True)),
                ('evaluacion_sedena', models.BooleanField(blank=True, default=False)),
                ('fecha_evaluacion_sedena', models.DateField(blank=True)),
                ('registro_estatal', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'NO REQUERIDO'), (2, 'EN TRÁMITE'), (3, 'ACEPTADO'), (4, 'RECHAZADO')])),
                ('fecha_registro_estatal', models.DateField(blank=True)),
                ('oficio_registro_estatal', models.CharField(blank=True, max_length=25)),
                ('verificacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'NO REQUERIDO'), (2, 'EN TRÁMITE'), (3, 'ACEPTADO'), (4, 'RECHAZADO')])),
                ('fecha_verificacion', models.DateField(blank=True)),
                ('registro_dgsp', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'NO REQUERIDO'), (2, 'EN TRÁMITE'), (3, 'ACEPTADO'), (4, 'RECHAZADO')])),
                ('fecha_registro_dgsp', models.DateField(blank=True)),
                ('oficio_registro_dgsp', models.CharField(blank=True, max_length=25)),
                ('registro_sedena', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'NO REQUERIDO'), (2, 'EN TRÁMITE'), (3, 'ACEPTADO'), (4, 'RECHAZADO')])),
                ('fecha_registro_sedena', models.DateField(blank=True)),
                ('oficio_registro_sedena', models.CharField(blank=True, max_length=25)),
                ('lic_part_col', models.CharField(blank=True, max_length=25)),
                ('comentarios', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Carpetas Laborales',
            },
        ),
        migrations.CreateModel(
            name='CarpetaReferencias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Carpeta Referencias',
            },
        ),
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_comercial', models.CharField(max_length=200)),
                ('razon_social', models.CharField(blank=True, max_length=200)),
                ('activo', models.BooleanField(blank=True, default=False)),
            ],
            options={
                'verbose_name_plural': 'Clientes',
            },
        ),
        migrations.CreateModel(
            name='CodigoPostal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo_postal', models.CharField(blank=True, max_length=5, null=True)),
            ],
            options={
                'verbose_name_plural': 'Codigos Postales',
            },
        ),
        migrations.CreateModel(
            name='Colonia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('colonia', models.CharField(max_length=100)),
                ('codigo_postal', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='data.codigopostal')),
            ],
            options={
                'verbose_name_plural': 'Colonias',
            },
        ),
        migrations.CreateModel(
            name='Curp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('curp', models.CharField(blank=True, max_length=18, unique=True, validators=[django.core.validators.RegexValidator('^[A-Z]{1}[AEIOU]{1}[A-Z]{2}[0-9]{2}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])[HM]{1}(AS|BC|BS|CC|CS|CH|CL|CM|DF|DG|GT|GR|HG|JC|MC|MN|MS|NT|NL|OC|PL|QT|QR|SP|SL|SR|TC|TS|TL|VZ|YN|ZS|NE)[B-DF-HJ-NP-TV-Z]{3}[0-9A-Z]{1}[0-9]{1}$', 'La CURP no es válida')])),
                ('nombre', models.CharField(max_length=100)),
                ('apellido_paterno', models.CharField(max_length=100)),
                ('apellido_materno', models.CharField(max_length=100)),
                ('iniciales', models.CharField(blank=True, max_length=20, null=True)),
                ('fecha_nacimiento', models.DateField(blank=True)),
                ('edad', models.PositiveIntegerField(blank=True, null=True)),
                ('anio_registro', models.PositiveIntegerField(blank=True, null=True)),
                ('numero_acta', models.CharField(blank=True, max_length=20, null=True)),
                ('validacion_renapo', models.BooleanField(blank=True, default=False, null=True)),
                ('sexo', models.CharField(max_length=10)),
                ('estatus_curp', models.CharField(blank=True, choices=[('AN', 'Alta Normal'), ('AH', 'Alta con Homonimia'), ('RCC', 'Registro de cambio afectando a CURP'), ('RCN', 'Registro de cambio no afectando a CURP'), ('BD', 'Baja por defunción'), ('BSU', 'Baja sin uso'), ('BJD', 'Baja Judicial'), ('BDM', 'Baja administrativa'), ('BAP', 'Baja por documento apócrifo'), ('BDP', 'Baja por adopción')], max_length=20, null=True)),
                ('clave_municipio_registro', models.CharField(blank=True, max_length=5, null=True)),
                ('municipio_registro', models.CharField(blank=True, max_length=100, null=True)),
                ('clave_entidad_registro', models.CharField(blank=True, max_length=5, null=True)),
                ('entidad_registro', models.CharField(blank=True, max_length=100, null=True)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'CURP',
            },
        ),
        migrations.CreateModel(
            name='EmpleoAnterior',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('empresa', models.CharField(blank=True, max_length=100, null=True)),
                ('telefono', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('fecha_ingreso', models.DateField(blank=True, null=True)),
                ('fecha_separacion', models.DateField(blank=True, null=True)),
                ('salario', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('area_puesto', models.CharField(blank=True, max_length=50, null=True)),
                ('funciones', models.CharField(blank=True, max_length=100, null=True)),
                ('tipo_separacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'RENUNCIA'), (2, 'CAUSA ADMINISTRATIVA'), (3, 'COMETER DELITO'), (4, 'PENSIONADO(A)'), (5, 'DEFUNCIÓN')], null=True)),
                ('jefe_inmediato', models.CharField(blank=True, max_length=300, null=True)),
                ('puesto_jefe_inmediato', models.CharField(blank=True, max_length=50, null=True)),
                ('informante', models.CharField(blank=True, max_length=300, null=True)),
                ('puesto_informante', models.CharField(blank=True, max_length=50, null=True)),
                ('desempenio', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'REGULAR'), (3, 'BUENO'), (4, 'EXCELENTE')], null=True)),
                ('observaciones', models.TextField(blank=True, null=True)),
                ('emp_ant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.carpetaempleoanterior')),
            ],
            options={
                'verbose_name_plural': 'Empleos Anteriores',
            },
        ),
        migrations.CreateModel(
            name='EmpleoAnteriorSeguridadPublica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dependencia', models.CharField(blank=True, max_length=100, null=True)),
                ('corporacion', models.CharField(blank=True, max_length=100, null=True)),
                ('direccion', models.CharField(blank=True, max_length=150, null=True)),
                ('numero_exterior', models.CharField(blank=True, max_length=20, null=True)),
                ('numero_interior', models.CharField(blank=True, max_length=20, null=True)),
                ('telefono', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('fecha_ingreso', models.DateField(blank=True, null=True)),
                ('fecha_separacion', models.DateField(blank=True, null=True)),
                ('funciones', models.CharField(blank=True, max_length=100, null=True)),
                ('especialidad', models.CharField(blank=True, max_length=50, null=True)),
                ('rango_categoria', models.CharField(blank=True, max_length=50, null=True)),
                ('sueldo_base', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('numero_placa', models.CharField(blank=True, max_length=15, null=True)),
                ('numero_emp', models.CharField(blank=True, max_length=15, null=True)),
                ('area', models.CharField(blank=True, max_length=50, null=True)),
                ('division', models.CharField(blank=True, max_length=50, null=True)),
                ('tipo_separacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'RENUNCIA'), (2, 'CAUSA ADMINISTRATIVA'), (3, 'COMETER DELITO'), (4, 'PENSIONADO(A)'), (5, 'DEFUNCIÓN')], null=True)),
                ('jefe_inmediato', models.CharField(blank=True, max_length=300, null=True)),
                ('cuip_jefe_inmediato', models.CharField(blank=True, max_length=20, null=True)),
                ('comentarios', models.CharField(blank=True, max_length=150, null=True)),
                ('carp_emp_ant_seg_pub', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.carpetaempleoanteriorseguridadpublica')),
            ],
            options={
                'verbose_name_plural': 'Empresas Anteriores Seguridad Publica',
            },
        ),
        migrations.CreateModel(
            name='Estado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estado', models.CharField(max_length=100)),
                ('clave_estado_racek', models.CharField(blank=True, max_length=2, null=True)),
            ],
            options={
                'verbose_name_plural': 'Estados',
            },
        ),
        migrations.CreateModel(
            name='Habilidad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('computacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'REGULAR'), (3, 'BUENO'), (4, 'EXCELENTE')], null=True)),
                ('investigacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'REGULAR'), (3, 'BUENO'), (4, 'EXCELENTE')], null=True)),
                ('manejo_armas', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'REGULAR'), (3, 'BUENO'), (4, 'EXCELENTE')], null=True)),
                ('manejo_grupos', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'REGULAR'), (3, 'BUENO'), (4, 'EXCELENTE')], null=True)),
                ('mecanica', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'REGULAR'), (3, 'BUENO'), (4, 'EXCELENTE')], null=True)),
                ('carpinteria', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'REGULAR'), (3, 'BUENO'), (4, 'EXCELENTE')], null=True)),
                ('conduccion_medios', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'REGULAR'), (3, 'BUENO'), (4, 'EXCELENTE')], null=True)),
                ('carpeta_capacitacion', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.carpetacapacitacion')),
            ],
            options={
                'verbose_name_plural': 'Habilidades',
            },
        ),
        migrations.CreateModel(
            name='Personal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('folio', models.CharField(blank=True, default='SIN FOLIO', max_length=10, null=True)),
                ('origen', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Presencial'), (2, 'Remoto')], null=True)),
                ('fecha', models.DateField(auto_now=True)),
                ('es_empleado', models.BooleanField(blank=True, default=False)),
                ('observaciones', models.TextField(blank=True, null=True)),
                ('resultado', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'APTO'), (2, 'APTO BAJO RESERVA'), (3, 'NO APTO'), (4, 'NO INICIA PROCESO'), (5, 'NO FINALIZA PROCESO'), (6, 'NO SOLICITADO')], null=True)),
                ('cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.cliente')),
                ('curp', models.OneToOneField(null=True, on_delete=django.db.models.deletion.RESTRICT, to='data.curp')),
            ],
            options={
                'verbose_name_plural': 'Personal',
            },
        ),
        migrations.CreateModel(
            name='Rfc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rfc', models.CharField(max_length=13, validators=[django.core.validators.RegexValidator('/^([A-ZÑ&]{3,4}) ?(?:- ?)?(\\d{2}(?:0[1-9]|1[0-2])(?:0[1-9]|[12]\\d|3[01])) ?(?:- ?)?([A-Z\\d]{2})([A\\d])$/', 'La CURP no es válida')])),
                ('rfc_digital', models.FileField(blank=True, unique=True, upload_to='temp/documentos')),
                ('razon_social', models.CharField(blank=True, max_length=255, null=True)),
                ('estatus', models.CharField(blank=True, max_length=20, null=True)),
                ('fecha_efectiva', models.DateField(blank=True, null=True)),
                ('correo_contacto', models.CharField(blank=True, max_length=200, null=True)),
                ('validez', models.CharField(blank=True, max_length=20, null=True)),
                ('tipo', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'verbose_name_plural': 'RFC',
            },
        ),
        migrations.CreateModel(
            name='TipoCurso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_curso', models.CharField(blank=True, max_length=100, null=True)),
                ('capacitacion_previa', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to='data.capacitacionprevia')),
            ],
            options={
                'verbose_name_plural': 'Tipo Cursos',
            },
        ),
        migrations.CreateModel(
            name='TipoBaja',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('motivo', models.CharField(blank=True, max_length=50, null=True)),
                ('emp_ant_seg_pub', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to='data.empleoanteriorseguridadpublica')),
            ],
            options={
                'verbose_name_plural': 'Tipos Baja',
            },
        ),
        migrations.CreateModel(
            name='Sede',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clave_sede', models.CharField(blank=True, max_length=6, null=True)),
                ('nombre_sede', models.CharField(max_length=100)),
                ('cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.cliente')),
            ],
            options={
                'verbose_name_plural': 'Sedes',
            },
        ),
        migrations.CreateModel(
            name='Referencia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_referencia', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FAMILIAR CERCANO'), (2, 'PARIENTE CERCANO'), (3, 'PERSONAL'), (4, 'VECINAL'), (5, 'LABORAL')])),
                ('nombre', models.CharField(max_length=100)),
                ('apellido_paterno', models.CharField(max_length=100)),
                ('apellido_materno', models.CharField(max_length=100)),
                ('sexo', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FEMENINO'), (2, 'MASCULINO'), (3, 'NO BINARIO')])),
                ('ocupacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ADMINISTRATIVO'), (2, 'AGRÍCOLA-GANADERO, SILVICULTURA Y PESCA'), (3, 'COMERCIANTE Y AGENTE DE VENTAS'), (4, 'DE LA EDUCACIÓN'), (5, 'DE SERVICIOS DOMÉSTICOS REMUNERADOS'), (6, 'DE SERVICIOS PERSONALES'), (7, 'DEL ARTE, ESPECTÁCULOS Y DEPORTES'), (8, 'EMPLEADO'), (9, 'ESTUDIANTE'), (10, 'FUNCIONARIO DEL SECTOR PRIVADO'), (11, 'FUNCIONARIO DEL SECTOR PÚBLICO'), (12, 'HOGAR'), (13, 'JEFES DE ACTIVIDADES ADMINISTRATIVAS'), (14, 'JUBILADO'), (15, 'NO TRABAJA'), (16, 'OBRERO'), (17, 'OPERADOR DE MÁQUINAS DE PRODUCCIÓN'), (18, 'OPERADOR DE TRANSPORTES'), (19, 'PERSONA CONTRATADA EN ACTIVIDADES INDUSTRIALES'), (20, 'PERSONA DE APOYO EN LA INDUSTRIA ARTESANAL'), (21, 'PROFESIONISTA'), (22, 'REPRESENTANTE LEGAL'), (23, 'SECRETARIA'), (24, 'SERVIDOR DE PROTECCIÓN Y VIGILANCIA'), (25, 'TÉCNICO'), (26, 'VENDEDOR AMBULANTE')])),
                ('parentesco', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ABUELO(A)'), (2, 'AHIJADO(A)'), (3, 'AMISTAD'), (4, 'AMOROSA'), (5, 'CÓNYUGE'), (6, 'CUÑADO(A)'), (7, 'ENTENADO(A)'), (8, 'HERMANO(A)'), (9, 'HIJO(A)'), (10, 'LABORAL'), (11, 'MADRE'), (12, 'MADRINA'), (13, 'NIETO(A)'), (14, 'PADRE'), (15, 'PADRINO'), (16, 'PRIMO(A)'), (17, 'SOBRINO(A)'), (18, 'SUEGRO(A)'), (19, 'TÍO(A)'), (20, 'YERNO O NUERA')])),
                ('tiempo_de_conocerse', models.CharField(blank=True, max_length=30)),
                ('direccion', models.CharField(blank=True, max_length=100)),
                ('codigo_postal', models.CharField(blank=True, max_length=5, null=True)),
                ('telefono_contacto', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('opinion', models.TextField(blank=True, null=True)),
                ('carpeta_referencia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.carpetareferencias')),
            ],
            options={
                'verbose_name_plural': 'Referencias',
            },
        ),
        migrations.CreateModel(
            name='PuestoFuncional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_puesto', models.CharField(blank=True, max_length=50, null=True)),
                ('emp_ant_seg_pub', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to='data.empleoanteriorseguridadpublica')),
            ],
            options={
                'verbose_name_plural': 'Puestos Funcionales',
            },
        ),
        migrations.CreateModel(
            name='Puesto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_puesto', models.CharField(max_length=30)),
                ('carpeta_laboral', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to='data.carpetalaboral')),
            ],
            options={
                'verbose_name_plural': 'Puestos',
            },
        ),
        migrations.CreateModel(
            name='PersonalPorCapacitar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resultado_capacitacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'NO HA PRESENTADO'), (2, 'EN CAPACITACIÓN'), (3, 'APROBÓ'), (4, 'NO APROBÓ')], null=True)),
                ('capacitacion_cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.capacitacioncliente')),
                ('personal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.personal')),
            ],
            options={
                'verbose_name_plural': 'Personal Por Capacitar',
            },
        ),
        migrations.AddField(
            model_name='personal',
            name='rfc',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='data.rfc'),
        ),
        migrations.CreateModel(
            name='Pais',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pais', models.CharField(default='México', max_length=100)),
                ('clave_pais_racek', models.CharField(blank=True, max_length=4, null=True)),
                ('estado', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to='data.estado')),
            ],
            options={
                'verbose_name_plural': 'Paises',
            },
        ),
        migrations.CreateModel(
            name='Municipio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('municipio', models.CharField(max_length=100)),
                ('clave_municipio_racek', models.CharField(blank=True, max_length=4, null=True)),
                ('colonia', models.OneToOneField(null=True, on_delete=django.db.models.deletion.RESTRICT, to='data.colonia')),
            ],
            options={
                'verbose_name_plural': 'Municipios',
            },
        ),
        migrations.CreateModel(
            name='MotivoSeparacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('motivo', models.CharField(blank=True, max_length=50, null=True)),
                ('emp_ant', models.OneToOneField(null=True, on_delete=django.db.models.deletion.RESTRICT, to='data.empleoanterior')),
                ('emp_ant_seg_pub', models.OneToOneField(null=True, on_delete=django.db.models.deletion.RESTRICT, to='data.empleoanteriorseguridadpublica')),
            ],
            options={
                'verbose_name_plural': 'Motivos Separacion',
            },
        ),
        migrations.CreateModel(
            name='Idioma',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idioma', models.CharField(blank=True, max_length=50, null=True)),
                ('lectura', models.CharField(blank=True, max_length=3, null=True)),
                ('escritura', models.CharField(blank=True, max_length=3, null=True)),
                ('conversacion', models.CharField(blank=True, max_length=3, null=True)),
                ('carpeta_capacitacion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.carpetacapacitacion')),
            ],
        ),
        migrations.CreateModel(
            name='HabilidadPersonalizada',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_habilidad', models.CharField(blank=True, max_length=50, null=True)),
                ('calificacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'REGULAR'), (3, 'BUENO'), (4, 'EXCELENTE')], null=True)),
                ('habilidad', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.habilidad')),
            ],
            options={
                'verbose_name_plural': 'Habilidades Personalizadas',
            },
        ),
        migrations.CreateModel(
            name='Evaluador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evaluador', models.CharField(max_length=300)),
                ('personal', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to='data.personal')),
            ],
        ),
        migrations.AddField(
            model_name='estado',
            name='municipio',
            field=models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to='data.municipio'),
        ),
        migrations.CreateModel(
            name='Domicilio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calle', models.CharField(max_length=100)),
                ('numero_exterior', models.CharField(max_length=20)),
                ('numero_interior', models.CharField(blank=True, max_length=20, null=True)),
                ('entre_calle', models.CharField(blank=True, max_length=100, null=True)),
                ('y_calle', models.CharField(blank=True, max_length=100, null=True)),
                ('ciudad', models.CharField(max_length=50)),
                ('carp_emp_ant', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data.carpetaempleoanterior')),
                ('carp_emp_ant_seg_pub', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data.carpetaempleoanteriorseguridadpublica')),
                ('cliente_generales', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data.carpetaclientegenerales')),
                ('cliente_pagos', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data.carpetaclientepagos')),
                ('personal', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data.personal')),
                ('referencia', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data.referencia')),
            ],
            options={
                'verbose_name_plural': 'Domicilios',
            },
        ),
        migrations.CreateModel(
            name='DocumentosDigitales',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hoja_datos', models.FileField(blank=True, null=True, upload_to='temp/documentos')),
                ('solicitud', models.ImageField(blank=True, null=True, upload_to='temp/documentos')),
                ('ine', models.ImageField(blank=True, null=True, upload_to='temp/documentos')),
                ('acta_nacimiento', models.ImageField(blank=True, null=True, upload_to='temp/documentos')),
                ('folio_acta_nacimiento', models.CharField(blank=True, max_length=20, null=True)),
                ('huellas_digitales', models.FileField(blank=True, null=True, upload_to='temp/documentos')),
                ('curp', models.FileField(blank=True, null=True, upload_to='temp/documentos')),
                ('comprobante_domicilio', models.ImageField(blank=True, null=True, upload_to='temp/documentos')),
                ('fecha_comprobante_domicilio', models.DateField(blank=True, null=True)),
                ('antecedentes_no_penales', models.ImageField(blank=True, null=True, upload_to='temp/documentos')),
                ('fecha_antecedentes_no_penales', models.DateField(blank=True, null=True)),
                ('comprobante_estudios', models.ImageField(blank=True, null=True, upload_to='temp/documentos')),
                ('cartilla_smn', models.ImageField(blank=True, null=True, upload_to='temp/documentos')),
                ('nss', models.FileField(blank=True, null=True, upload_to='temp/documentos')),
                ('carta_recomendacion', models.FileField(blank=True, null=True, upload_to='temp/documentos')),
                ('contrato', models.FileField(blank=True, null=True, upload_to='temp/documentos')),
                ('socioeconomico', models.FileField(blank=True, null=True, upload_to='temp/documentos')),
                ('fecha_socioeconomico', models.DateField(blank=True, null=True)),
                ('foto_socioeconomico', models.ImageField(blank=True, null=True, upload_to='temp/documentos')),
                ('psicologico', models.FileField(blank=True, null=True, upload_to='temp/documentos')),
                ('fecha_psicologico', models.DateField(blank=True, null=True)),
                ('medico', models.FileField(blank=True, null=True, upload_to='temp/documentos')),
                ('fecha_medico', models.DateField(blank=True, null=True)),
                ('toxicologico', models.FileField(blank=True, null=True, upload_to='temp/documentos')),
                ('fecha_toxicologico', models.DateField(blank=True, null=True)),
                ('fisico', models.FileField(blank=True, null=True, upload_to='temp/documentos')),
                ('fecha_fisico', models.DateField(blank=True, null=True)),
                ('croquis', models.ImageField(blank=True, null=True, upload_to='temp/documentos')),
                ('curriculum', models.FileField(blank=True, null=True, upload_to='temp/documentos')),
                ('check_acta_nacimiento', models.BooleanField(blank=True, default=False)),
                ('check_ine', models.BooleanField(blank=True, default=False)),
                ('check_comprobante_domicilio', models.BooleanField(blank=True, default=False)),
                ('check_comprobante_estudios', models.BooleanField(blank=True, default=False)),
                ('check_curp', models.BooleanField(blank=True, default=False)),
                ('check_rfc', models.BooleanField(blank=True, default=False)),
                ('check_cartilla', models.BooleanField(blank=True, default=False)),
                ('check_nss', models.BooleanField(blank=True, default=False)),
                ('check_huellas_digitales', models.BooleanField(blank=True, default=False)),
                ('check_fotografias', models.BooleanField(blank=True, default=False)),
                ('personal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.personal')),
            ],
            options={
                'verbose_name_plural': 'Documentos Personales',
            },
        ),
        migrations.CreateModel(
            name='Dependiente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(blank=True, max_length=100)),
                ('apellido_paterno', models.CharField(blank=True, max_length=100)),
                ('apellido_materno', models.CharField(blank=True, max_length=100)),
                ('sexo', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FEMENINO'), (2, 'MASCULINO'), (3, 'NO BINARIO')])),
                ('fecha_nacimiento', models.DateField(blank=True)),
                ('parentesco', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ABUELO(A)'), (2, 'AHIJADO(A)'), (3, 'AMISTAD'), (4, 'AMOROSA'), (5, 'CÓNYUGE'), (6, 'CUÑADO(A)'), (7, 'ENTENADO(A)'), (8, 'HERMANO(A)'), (9, 'HIJO(A)'), (10, 'LABORAL'), (11, 'MADRE'), (12, 'MADRINA'), (13, 'NIETO(A)'), (14, 'PADRE'), (15, 'PADRINO'), (16, 'PRIMO(A)'), (17, 'SOBRINO(A)'), (18, 'SUEGRO(A)'), (19, 'TÍO(A)'), (20, 'YERNO O NUERA')])),
                ('actividad', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'HOGAR'), (2, 'ESTUDIANTE'), (3, 'INCAPACITADO'), (4, 'PENSIONADO'), (5, 'DESEMPLEADO')])),
                ('comentarios', models.TextField(blank=True, null=True)),
                ('carpeta_dependientes', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.carpetadependientes')),
            ],
            options={
                'verbose_name_plural': 'Dependientes',
            },
        ),
        migrations.AddField(
            model_name='codigopostal',
            name='domicilio',
            field=models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to='data.domicilio'),
        ),
        migrations.AddField(
            model_name='carpetareferencias',
            name='personal',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.personal'),
        ),
        migrations.CreateModel(
            name='CarpetaMediaFiliacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tension_arterial', models.CharField(blank=True, max_length=10, null=True)),
                ('temperatura', models.CharField(blank=True, max_length=5, null=True)),
                ('indice_masa_corporal', models.CharField(blank=True, max_length=6, null=True)),
                ('clasificacion_imc', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'NORMAL'), (2, 'SOBREPESO'), (3, 'OBESIDAD GI'), (4, 'OBESIDAD GII'), (5, 'OBESIDAD GIII'), (6, 'DELGADEZ')], null=True)),
                ('sat02', models.CharField(blank=True, max_length=10, null=True)),
                ('frecuencia_cardiaca', models.CharField(blank=True, max_length=6, null=True)),
                ('cronica_degenerativa', models.CharField(blank=True, max_length=100, null=True)),
                ('complexion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DELGADA'), (2, 'REGULAR'), (3, 'ROBUSTA'), (4, 'ATLÉTICA'), (5, 'OBESA')])),
                ('color_piel', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ALBINO'), (2, 'BLANCO'), (3, 'AMARILLO'), (4, 'MORENO CLARO'), (5, 'MORENO'), (6, 'MORENO OSCURO'), (7, 'NEGRO'), (8, 'OTRO')])),
                ('cara', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ALARGADA'), (2, 'CUADRADA'), (3, 'OVALADA'), (4, 'REDONDA')])),
                ('cabello_cantidad', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ABUNDANTE'), (2, 'ESCASO'), (3, 'REGULAR'), (4, 'SIN CABELLO')])),
                ('cabello_color', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ALBINO'), (2, 'CANO TOTAL'), (3, 'CASTAÑO CLARO'), (4, 'CASTAÑO OSCURO'), (5, 'ENTRECANO'), (6, 'NEGRO'), (7, 'PELIRROJO'), (8, 'RUBIO')])),
                ('cabello_forma', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'CRESPO'), (2, 'LACIO'), (3, 'ONDULADO'), (4, 'RIZADO')])),
                ('cabello_calvicie', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FRONTAL'), (2, 'TONSURAL'), (3, 'FRONTOPARIETAL'), (4, 'TOTAL')])),
                ('cabello_implantacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'CIRUCLAR'), (2, 'RECTANGULAR'), (3, 'EN PUNTA')])),
                ('frente_altura', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'GRANDE'), (2, 'MEDIANA'), (3, 'PEQUEÑA')])),
                ('frente_indicacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'OBLICUA'), (2, 'INTERMEDIA'), (3, 'VERTICAL'), (4, 'PROMINENTE')])),
                ('frente_ancho', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'GRANDE'), (2, 'MEDIANA'), (3, 'PEQUEÑA')])),
                ('cejas_direccion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'INTERNAS'), (2, 'EXTERNAS'), (3, 'HORIZONTAL')])),
                ('cejas_implantacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ALTAS'), (2, 'BAJAS'), (3, 'PROXIMAS'), (4, 'SEPARADAS')])),
                ('cejas_forma', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ARQUEADAS'), (2, 'ARQUEADAS SINUOSAS'), (3, 'RECTILÍNEAS'), (4, 'RECTILÍNEAS SINUOSAS')])),
                ('cejas_tamanio', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'GRUESAS'), (2, 'DELGADAS'), (3, 'CORTAS'), (4, 'LARGAS')])),
                ('ojos_color', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'AZUL'), (2, 'CAFÉ CLARO'), (3, 'CAFÉ OSCURO'), (4, 'GRIS'), (5, 'VERDE'), (6, 'OTRO')])),
                ('ojos_forma', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ALARGADOS'), (2, 'REDONDOS'), (3, 'OVALES')])),
                ('ojos_tamanio', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'GRANDES'), (2, 'PEQUEÑOS'), (3, 'REGULARES')])),
                ('ojos_raiz', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'GRANDE'), (2, 'MEDIANA'), (3, 'PEQUEÑA')])),
                ('nariz_dorso', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'CÓNCAVO'), (2, 'CONVEXO'), (3, 'RECTO'), (4, 'SINUOSO')])),
                ('nariz_ancho', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'GRANDE'), (2, 'MEDIANA'), (3, 'PEQUEÑA')])),
                ('nariz_base', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ABATIDA'), (2, 'HORIZONTAL'), (3, 'LEVANTADA')])),
                ('nariz_altura', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'GRANDE'), (2, 'MEDIANA'), (3, 'PEQUEÑA')])),
                ('boca_tamanio', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'GRANDE'), (2, 'MEDIANA'), (3, 'PEQUEÑA')])),
                ('boca_comisuras', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ABATIDAS'), (2, 'ELEVADAS'), (3, 'SIMÉTRICAS'), (4, 'ASIMÉTRICAS')])),
                ('labios_espesor', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DELGADOS'), (2, 'MEDIANOS'), (3, 'GRUESOS'), (4, 'MORRUDOS')])),
                ('altura_nasolabial', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'GRANDE'), (2, 'MEDIANA'), (3, 'PEQUEÑA')])),
                ('labios_prominencia', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'LABIO INFERIOR'), (2, 'LABIO SUPERIOR'), (3, 'NINGUNO')])),
                ('menton_tipo', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'BILOVADO'), (2, 'FOSETA'), (3, 'BORLA'), (4, 'NINGUNA')])),
                ('menton_forma', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'OVAL'), (2, 'CUADRADO'), (3, 'EN PUNTA')])),
                ('menton_inclinacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'HUYENTE'), (2, 'PROMINENTE'), (3, 'VERTICAL')])),
                ('oreja_derecha_forma', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'CUADRADA'), (2, 'OVALADA'), (3, 'REDONDA'), (4, 'TRIANGULAR')])),
                ('oreja_derecha_original', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'GRANDE'), (2, 'MEDIANA'), (3, 'PEQUEÑA')])),
                ('oreja_derecha_helix_superior', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'GRANDE'), (2, 'MEDIANA'), (3, 'PEQUEÑA')])),
                ('oreja_derecha_helix_posterior', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'GRANDE'), (2, 'MEDIANA'), (3, 'PEQUEÑA')])),
                ('oreja_derecha_helix_adherencia', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'UNIDO'), (2, 'SEPARADO'), (3, 'MUY SEPARADO')])),
                ('oreja_derecha_helix_contorno', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DESCENDENTE'), (2, 'EN ESCUADRA'), (3, 'EN GOLFO'), (4, 'INTERMEDIO')])),
                ('oreja_derecha_lobulo_adherencia', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'UNIDO'), (2, 'SEPARADO'), (3, 'MUY SEPARADO')])),
                ('oreja_derecha_lobulo_particularidad', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'PERFORADO'), (2, 'FOSETA'), (3, 'ISLOTE')])),
                ('oreja_derecha_lobulo_dimension', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'GRANDE'), (2, 'MEDIANA'), (3, 'PEQUEÑA')])),
                ('sangre', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'NO SABE'), (2, 'A'), (3, 'B'), (4, 'O'), (5, 'AB')])),
                ('rh', models.PositiveSmallIntegerField(blank=True, choices=[(1, '-'), (2, '+')])),
                ('anteojos', models.BooleanField(blank=True, default=False, null=True)),
                ('estatura', models.CharField(blank=True, max_length=15, null=True)),
                ('peso', models.DecimalField(blank=True, decimal_places=2, max_digits=3)),
                ('personal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.personal')),
            ],
            options={
                'verbose_name_plural': 'Carpetas Media Filiación',
            },
        ),
        migrations.AddField(
            model_name='carpetalaboral',
            name='personal',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.personal'),
        ),
        migrations.CreateModel(
            name='CarpetaGenerales',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_empleado', models.CharField(blank=True, max_length=200)),
                ('telefono_domicilio', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('telefono_celular', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('telefono_recados', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('numero_elemento', models.PositiveIntegerField(blank=True)),
                ('transporte', models.CharField(blank=True, max_length=50)),
                ('tiempo_trayecto', models.CharField(blank=True, max_length=15, null=True)),
                ('estado_civil', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'SOLTERO(A)'), (2, 'CASADO(A)'), (3, 'VIUDO(A)'), (4, 'DIVORCIADO(A)'), (5, 'UNIÓN LIBRE O CONCUBINATO')])),
                ('estado_cartilla', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'PRE-CARTILLA'), (2, 'LIBERADA'), (3, 'NO APLICA'), (4, 'PRESENTÓ')])),
                ('clave_cartilla', models.CharField(blank=True, max_length=18)),
                ('cuip', models.CharField(blank=True, max_length=20)),
                ('clave_ine', models.CharField(blank=True, max_length=20)),
                ('folio', models.CharField(blank=True, max_length=20)),
                ('nss', models.CharField(blank=True, max_length=15)),
                ('pasaporte', models.CharField(blank=True, max_length=20)),
                ('escolaridad', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'SIN ESCOLARIDAD'), (2, 'PRIMARIA INCOMPLETA'), (3, 'PRIMARIA COMPLETA'), (4, 'SECUNDARIA INCOMPLETA'), (5, 'SECUNDARIA COMPLETA'), (6, 'CARRERA TÉCNICA INCOMPLETA'), (7, 'CARRERA TÉCNICA COMPLETA'), (8, 'BACHILLERATO INCOMPLETA'), (9, 'BACHILLERATO COMPLETA'), (10, 'LICENCIATURA INCOMPLETA'), (11, 'LICENCIATURA COMPLETA'), (12, 'ESPECIALIDAD INCOMPLETA'), (13, 'ESPECIALIDAD COMPLETA'), (14, 'MAESTRÍA INCOMPLETA'), (15, 'MAESTRÍA COMPLETA'), (16, 'DOCTORADO INCOMPLETA'), (17, 'DOCTORADO COMPLETA'), (18, 'ANALFABETO(A)')])),
                ('escuela', models.CharField(blank=True, max_length=200)),
                ('especialidad_escuela', models.CharField(blank=True, max_length=50)),
                ('cedula_profesional', models.CharField(blank=True, max_length=20)),
                ('registro_sep', models.BooleanField(blank=True, default=False)),
                ('anio_inicio_escolaridad', models.DateField(blank=True)),
                ('anio_termino_escolaridad', models.DateField(blank=True)),
                ('comprobante_estudios', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'NINGUNO'), (2, 'BOLETA'), (3, 'DIPLOMA'), (4, 'CONSTANCIA'), (5, 'CERTIFICADO'), (6, 'TÍTULO')])),
                ('folio_certificado', models.CharField(blank=True, max_length=20)),
                ('promedio', models.DecimalField(blank=True, decimal_places=2, max_digits=3)),
                ('antecedentes', models.PositiveSmallIntegerField(blank=True, choices=[(1, '1ER EMPLEO'), (2, 'SIN EXPERIENCIA EN SEGURIDAD PRIVADA'), (3, 'EXPERIENCIA EN SEGURIDAD PRIVADA'), (4, 'MILITAR CON BAJA'), (5, 'MILITAR RETIRADO'), (6, 'EX-POLICÍA')])),
                ('sabe_conducir', models.BooleanField(blank=True, default=False)),
                ('licencia_conducir', models.CharField(blank=True, max_length=20)),
                ('alergias', models.CharField(blank=True, max_length=30)),
                ('inicio_trabajo', models.DateField(blank=True)),
                ('fin_trabajo', models.DateField(blank=True)),
                ('personal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.personal')),
            ],
            options={
                'verbose_name_plural': 'Carpetas Generales',
            },
        ),
        migrations.CreateModel(
            name='CarpetaExamenToxicologico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_examen', models.DateField(auto_now=True)),
                ('cocaina', models.BooleanField(blank=True, default=False)),
                ('marihuana', models.BooleanField(blank=True, default=False)),
                ('opiaceos', models.BooleanField(blank=True, default=False)),
                ('anfetaminas', models.BooleanField(blank=True, default=False)),
                ('metanfetaminas', models.BooleanField(blank=True, default=False)),
                ('barbituricos', models.BooleanField(blank=True, default=False)),
                ('benzodiacepinas', models.BooleanField(blank=True, default=False)),
                ('resultado_toxicologico', models.BooleanField(blank=True, default=False)),
                ('resultado_aspirante', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'POSITIVO'), (2, 'NEGATIVO'), (3, 'NO INICIA PROCESO'), (4, 'NO FINALIZA PROCESO'), (5, 'NO SOLICITADO')], null=True)),
                ('observacion', models.TextField(blank=True, null=True)),
                ('personal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.personal')),
            ],
            options={
                'verbose_name_plural': 'Carpeta Examen Toxicológico',
            },
        ),
        migrations.CreateModel(
            name='CarpetaExamenSocioeconomico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('propiedades', models.CharField(blank=True, max_length=200, null=True)),
                ('inversiones', models.CharField(blank=True, max_length=200, null=True)),
                ('vehiculo', models.CharField(blank=True, max_length=200, null=True)),
                ('tarjetas_credito_departamental', models.CharField(blank=True, max_length=200, null=True)),
                ('adeudos_importantes', models.CharField(blank=True, max_length=200, null=True)),
                ('tipo_domicilio', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'PROPIO'), (2, 'RENTADO'), (3, 'HIPOTECADO'), (4, 'PRESTADO'), (5, 'FAMILIAR')], null=True)),
                ('titular_domicilio', models.CharField(blank=True, max_length=300, null=True)),
                ('tipo_vivienda', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'CASA SOLA'), (2, 'DEPARTAMENTO'), (3, 'VECINDAD'), (4, 'CAMPAMENTO'), (5, 'ALBERGUE')], null=True)),
                ('anios_residencia', models.CharField(blank=True, max_length=10, null=True)),
                ('niveles', models.CharField(blank=True, max_length=4, null=True)),
                ('cuartos', models.CharField(blank=True, max_length=5, null=True)),
                ('banos', models.CharField(blank=True, max_length=3, null=True)),
                ('patios', models.CharField(blank=True, max_length=3, null=True)),
                ('material_paredes', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'TABIQUE'), (2, 'MADERA'), (3, 'CARTÓN'), (4, 'OTROS')], null=True)),
                ('material_pisos', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'MOZAICO'), (2, 'LOSETA'), (3, 'CEMENTO'), (4, 'TIERRA APISONADA')], null=True)),
                ('material_techos', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'CONCRETO'), (2, 'LÁMINA DE ASBESTO'), (3, 'CARTÓN'), (4, 'LÁMINA METÁLICA')], null=True)),
                ('mobiliario_vivienda', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'SENCILLO'), (2, 'RUSTICO'), (3, 'MODERNO')], null=True)),
                ('television', models.BooleanField(blank=True, default=False)),
                ('estereo', models.BooleanField(blank=True, default=False)),
                ('dvd', models.BooleanField(blank=True, default=False)),
                ('estufa', models.BooleanField(blank=True, default=False)),
                ('horno_microondas', models.BooleanField(blank=True, default=False)),
                ('lavadora', models.BooleanField(blank=True, default=False)),
                ('refrigerador', models.BooleanField(blank=True, default=False)),
                ('computadora', models.BooleanField(blank=True, default=False)),
                ('internet', models.BooleanField(blank=True, default=False)),
                ('tv_paga', models.BooleanField(blank=True, default=False)),
                ('gasto_diario', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('familiar_adicional', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('importe_interesado', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('parentesco_familiar_1', models.CharField(blank=True, max_length=35, null=True)),
                ('importe_familiar_1', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('parentesco_familiar_2', models.CharField(blank=True, max_length=35, null=True)),
                ('importe_familiar_2', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('parentesco_familiar_3', models.CharField(blank=True, max_length=35, null=True)),
                ('importe_familiar_3', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('parentesco_familiar_4', models.CharField(blank=True, max_length=35, null=True)),
                ('importe_familiar_4', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('total_ingresos', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('egresos_alimentacion', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('egresos_renta', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('egresos_agua', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('egresos_electricidad', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('egresos_gas', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('egresos_telefono', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('egresos_transporte', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('egresos_educacion', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('egresos_adeudos', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('egresos_otros', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('total_egresos', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('salud_alergias', models.CharField(blank=True, max_length=100, null=True)),
                ('salud_visual_auditiva_fisica', models.CharField(blank=True, max_length=100, null=True)),
                ('salud_cirugias', models.CharField(blank=True, max_length=100, null=True)),
                ('salud_enfermedad_cronica', models.CharField(blank=True, max_length=100, null=True)),
                ('cigarro', models.BooleanField(blank=True, default=False, null=True)),
                ('cantidad_frecuencia_ciqarro', models.CharField(blank=True, max_length=100, null=True)),
                ('alcohol', models.BooleanField(blank=True, default=False, null=True)),
                ('cantidad_frecuencia_alcohol', models.CharField(blank=True, max_length=100, null=True)),
                ('vicios', models.CharField(blank=True, max_length=100, null=True)),
                ('atencion_medica_familiares', models.BooleanField(blank=True, default=False, null=True)),
                ('at_medica_observaciones', models.CharField(blank=True, max_length=100, null=True)),
                ('estado_salud_propio', models.CharField(blank=True, max_length=100, null=True)),
                ('ultima_vez_enfermo', models.CharField(blank=True, max_length=100, null=True)),
                ('embarazada', models.CharField(blank=True, max_length=100, null=True)),
                ('contacto_emergencia', models.CharField(blank=True, max_length=100, null=True)),
                ('telefono_emergencia', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, null=True, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('parentesco_contacto', models.CharField(blank=True, max_length=100, null=True)),
                ('actividates_fin_semana', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'PRACTICAR DEPORTE'), (2, 'VER TELEVISIÓN'), (3, 'IR AL CINE'), (4, 'VISITAR FAMILIARES'), (5, 'ACTIVIDAD AL AIRE LIBRE'), (6, 'REALIZAR QUEHACERES DEL HOGAR')], null=True)),
                ('actividades_culturales_deportes', models.CharField(blank=True, max_length=100, null=True)),
                ('estudia', models.BooleanField(blank=True, default=False)),
                ('que_estudia', models.CharField(blank=True, max_length=100, null=True)),
                ('organizacion_familia', models.CharField(blank=True, max_length=100, null=True)),
                ('comunicacion', models.CharField(blank=True, max_length=100, null=True)),
                ('roles', models.CharField(blank=True, max_length=100, null=True)),
                ('autoridad', models.CharField(blank=True, max_length=100, null=True)),
                ('limites', models.CharField(blank=True, max_length=100, null=True)),
                ('calidad_vida', models.CharField(blank=True, max_length=100, null=True)),
                ('imagen_publica', models.CharField(blank=True, max_length=100, null=True)),
                ('comportamiento_social', models.CharField(blank=True, max_length=100, null=True)),
                ('demanda_laboral', models.CharField(blank=True, max_length=100, null=True)),
                ('antecedentes_penales', models.CharField(blank=True, max_length=100, null=True)),
                ('porque_este_empleo', models.CharField(blank=True, max_length=200, null=True)),
                ('puesto_deseado', models.CharField(blank=True, max_length=100, null=True)),
                ('area_deseada', models.CharField(blank=True, max_length=100, null=True)),
                ('tiempo_ascenso', models.CharField(blank=True, max_length=100, null=True)),
                ('obtencion_reconocimiento', models.CharField(blank=True, max_length=100, null=True)),
                ('obtencion_ascenso', models.CharField(blank=True, max_length=100, null=True)),
                ('capacitacion_deseada', models.CharField(blank=True, max_length=100, null=True)),
                ('fecha_entrevista', models.DateField(blank=True, null=True)),
                ('visitador', models.CharField(blank=True, max_length=300, null=True)),
                ('cedula_profesional_visitador', models.CharField(blank=True, max_length=30, null=True)),
                ('supervisor', models.CharField(blank=True, max_length=300, null=True)),
                ('cedula_profesional_supervisor', models.CharField(blank=True, max_length=30, null=True)),
                ('recomendable', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'SI'), (2, 'NO'), (3, 'BAJO RESERVA')], null=True)),
                ('entorno_social', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'REGULAR'), (3, 'BUENO'), (4, 'EXCELENTE')], null=True)),
                ('entorno_familiar', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'REGULAR'), (3, 'BUENO'), (4, 'EXCELENTE')], null=True)),
                ('situacion_economica', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'REGULAR'), (3, 'BUENO'), (4, 'EXCELENTE')], null=True)),
                ('experiencia_laboral', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'REGULAR'), (3, 'BUENO'), (4, 'EXCELENTE')], null=True)),
                ('resultado_aspirante', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'APTO'), (2, 'APTO BAJO RESERVA'), (3, 'NO APTO'), (4, 'NO INICIA PROCESO'), (5, 'NO FINALIZA PROCESO'), (6, 'NO SOLICITADO')], null=True)),
                ('comentarios_generales', models.TextField(blank=True, null=True)),
                ('ruta_acceso', models.CharField(blank=True, max_length=200, null=True)),
                ('color_vivienda_porton', models.CharField(blank=True, max_length=150, null=True)),
                ('referencias', models.CharField(blank=True, max_length=150, null=True)),
                ('tiempo_traslado', models.CharField(blank=True, max_length=20, null=True)),
                ('gasto', models.CharField(blank=True, max_length=20, null=True)),
                ('parentesco', models.CharField(blank=True, max_length=30, null=True)),
                ('nombre_recados', models.CharField(blank=True, max_length=300, null=True)),
                ('telefono_recados', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, null=True, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('comentario', models.CharField(blank=True, max_length=300, null=True)),
                ('personal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.personal')),
            ],
            options={
                'verbose_name_plural': 'Carpeta Examen Socioeconómico',
            },
        ),
        migrations.CreateModel(
            name='CarpetaExamenPsicologico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_examen', models.DateField(auto_now=True)),
                ('actitud', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('inteligencia', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('personalidad', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('impulsividad', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('organizacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('valores', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('temperamento', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('confiabilidad', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('compromiso', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('habilidades_laborales', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('resultado_psicologico', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'APTO'), (2, 'APTO BAJO RESERVA'), (3, 'NO APTO')])),
                ('resultado_aspirante', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'APTO'), (2, 'APTO BAJO RESERVA'), (3, 'NO APTO'), (4, 'NO INICIA PROCESO'), (5, 'NO FINALIZA PROCESO'), (6, 'NO SOLICITADO')], null=True)),
                ('observacion', models.TextField(blank=True, null=True)),
                ('personal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.personal')),
            ],
            options={
                'verbose_name_plural': 'Carpeta Examen Psicológico',
            },
        ),
        migrations.CreateModel(
            name='CarpetaExamenPoligrafo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resultado_aspirante', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'APTO'), (2, 'NO APTO'), (3, 'NO INICIA PROCESO'), (4, 'NO FINALIZA PROCESO'), (5, 'NO SOLICITADO')], null=True)),
                ('observaciones', models.TextField(blank=True, null=True)),
                ('personal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.personal')),
            ],
            options={
                'verbose_name_plural': 'Carpeta Examen Polígrafo',
            },
        ),
        migrations.CreateModel(
            name='CarpetaExamenMedico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_examen', models.DateField(blank=True, null=True)),
                ('medico_agudeza_visual', models.CharField(blank=True, max_length=100, null=True)),
                ('medico_agudeza_auditiva', models.CharField(blank=True, max_length=100, null=True)),
                ('medico_agudeza_motriz', models.CharField(blank=True, max_length=100, null=True)),
                ('medico_estado_nutricional', models.CharField(blank=True, max_length=100, null=True)),
                ('medico_diagnostico_musculo_esqueletico', models.CharField(blank=True, max_length=100, null=True)),
                ('medico_cardiologico', models.CharField(blank=True, max_length=100, null=True)),
                ('medico_pulmonar', models.CharField(blank=True, max_length=100, null=True)),
                ('medico_odontologico', models.CharField(blank=True, max_length=100, null=True)),
                ('medico_resultado', models.CharField(blank=True, max_length=100, null=True)),
                ('ishihara_visual_oi', models.CharField(blank=True, max_length=10, null=True)),
                ('ishihara_visual_od', models.CharField(blank=True, max_length=10, null=True)),
                ('ishihara_visual_ao', models.CharField(blank=True, max_length=10, null=True)),
                ('ishihara_lentes', models.CharField(blank=True, max_length=10, null=True)),
                ('ishihara_deuteranopia', models.CharField(blank=True, max_length=30, null=True)),
                ('ishihara_protanopia', models.CharField(blank=True, max_length=30, null=True)),
                ('ishihara_tritanopia', models.CharField(blank=True, max_length=30, null=True)),
                ('ishihara_acromatopsia', models.CharField(blank=True, max_length=30, null=True)),
                ('ishihara_resultado', models.CharField(blank=True, max_length=100, null=True)),
                ('resultado_aspirante', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'APTO'), (2, 'APTO BAJO RESERVA'), (3, 'NO APTO'), (4, 'NO INICIA PROCESO'), (5, 'NO FINALIZA PROCESO'), (6, 'NO SOLICITADO')], null=True)),
                ('observacion', models.TextField(blank=True, null=True)),
                ('personal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.personal')),
            ],
            options={
                'verbose_name_plural': 'Carpeta Examen Médico',
            },
        ),
        migrations.CreateModel(
            name='CarpetaExamenFisico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_examen', models.DateField(blank=True)),
                ('elasticidad', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('velocidad', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('resistencia', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('condicion_fisica', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('reflejos', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('locomocion', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('prueba_esfuerzo', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('resultado', models.CharField(blank=True, max_length=100, null=True)),
                ('resultado_aspirante', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'APTO'), (2, 'APTO BAJO RESERVA'), (3, 'NO APTO'), (4, 'NO INICIA PROCESO'), (5, 'NO FINALIZA PROCESO'), (6, 'NO SOLICITADO')], null=True)),
                ('observacion', models.TextField(blank=True, null=True)),
                ('personal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.personal')),
            ],
            options={
                'verbose_name_plural': 'Carpeta Examen Físico',
            },
        ),
        migrations.AddField(
            model_name='carpetaempleoanteriorseguridadpublica',
            name='personal',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.personal'),
        ),
        migrations.AddField(
            model_name='carpetaempleoanterior',
            name='personal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.personal'),
        ),
        migrations.AddField(
            model_name='carpetadependientes',
            name='personal',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.personal'),
        ),
        migrations.AddField(
            model_name='carpetaclientepagos',
            name='cliente',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.cliente'),
        ),
        migrations.AddField(
            model_name='carpetaclientegenerales',
            name='cliente',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.cliente'),
        ),
        migrations.CreateModel(
            name='CarpetaClienteContactos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_contacto', models.CharField(max_length=300)),
                ('telefono_1', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('telefono_2', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('telefono_3', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('puesto', models.CharField(max_length=30)),
                ('email_1', models.CharField(blank=True, max_length=200)),
                ('email_2', models.CharField(blank=True, max_length=200)),
                ('cliente', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.cliente')),
            ],
            options={
                'verbose_name_plural': 'Clientes Contactos',
            },
        ),
        migrations.AddField(
            model_name='carpetacapacitacion',
            name='personal',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.personal'),
        ),
        migrations.AddField(
            model_name='capacitacionprevia',
            name='carpeta_capacitacion',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.carpetacapacitacion'),
        ),
        migrations.CreateModel(
            name='CapacitacionEnCurso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estudio_curso', models.CharField(blank=True, max_length=100, null=True)),
                ('inicio', models.DateField(blank=True, null=True)),
                ('conclusion', models.DateField(blank=True, null=True)),
                ('duracion', models.CharField(blank=True, max_length=10, null=True)),
                ('carpeta_capacitacion', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='data.carpetacapacitacion')),
            ],
            options={
                'verbose_name_plural': 'Capacitaciones en Curso',
            },
        ),
        migrations.AddField(
            model_name='capacitacioncliente',
            name='capacitacion_en_curso',
            field=models.ManyToManyField(related_name='capacitacionesencurso', to='data.capacitacionencurso'),
        ),
        migrations.AddField(
            model_name='capacitacioncliente',
            name='cliente',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='data.cliente'),
        ),
    ]
