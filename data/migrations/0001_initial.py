# Generated by Django 4.0.3 on 2023-03-04 17:13

import data.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CarpetaLaboral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modalidad', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ADMINISTRATIVO'), (2, 'EN LOS BIENES'), (3, 'EN EL TRASLADO DE BIENES'), (4, 'A PERSONAS'), (5, 'MANTENIMIENTO')])),
                ('estatus_empleado', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ACTIVO'), (2, 'BAJA SIN ENTREGAR UNIFORME'), (3, 'BAJA PROCESO COMPLETO'), (4, 'BAJA DEMANDÓ'), (5, 'BAJA DEMANDADO')])),
                ('proceso_racek', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'CONTRATADO'), (2, 'APTO CON RESERVA'), (3, 'NO CONCLUYÓ'), (4, 'CANCELADO'), (5, 'EN EVALUACIÓN'), (6, 'APTO'), (7, 'NO APTO'), (8, 'BAJA')])),
                ('fecha_atencion', models.DateField(blank=True)),
                ('reingreso', models.BooleanField(blank=True, default=False)),
                ('inicio_labores', models.DateField(blank=True)),
                ('visita_domiciliaria', models.BooleanField(blank=True, default=False)),
                ('cedula', models.DateField(blank=True)),
                ('nivel_mando', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'MEDIO'), (2, 'NINGUNO'), (3, 'ALTO')])),
                ('oficina', models.CharField(blank=True, max_length=30)),
                ('especialidad_empleo', models.CharField(blank=True, max_length=35)),
                ('servicio', models.CharField(blank=True, max_length=30)),
                ('rango', models.CharField(blank=True, max_length=30)),
                ('turno', models.CharField(blank=True, max_length=30)),
                ('division', models.CharField(blank=True, max_length=35)),
                ('sueldo', models.DecimalField(blank=True, decimal_places=2, max_digits=7)),
                ('funciones', models.CharField(blank=True, max_length=35)),
                ('evaluacion', models.BooleanField(blank=True, default=False)),
                ('integracion', models.DateField(auto_now=True)),
                ('vigencia', models.DateField(auto_now=True)),
                ('capacitacion', models.BooleanField(blank=True, default=False)),
                ('ultima_actualizacion', models.DateField(auto_now=True)),
                ('impresion', models.BooleanField(blank=True, default=False)),
                ('fecha_impresion', models.DateField(blank=True)),
                ('expediente', models.CharField(blank=True, max_length=25)),
                ('cedula_federal', models.BooleanField(blank=True, default=False)),
                ('fecha_cedula_federal', models.DateField(blank=True)),
                ('cedula_cdmx', models.BooleanField(blank=True, default=False)),
                ('fecha_cedula_cdmx', models.DateField(blank=True)),
                ('evaluacion_federal', models.BooleanField(blank=True, default=False)),
                ('fecha_evaluacion_federal', models.DateField(blank=True)),
                ('evaluacion_cdmx', models.BooleanField(blank=True, default=False)),
                ('fecha_evaluacion_cdmx', models.DateField(blank=True)),
                ('evaluacion_sedena', models.BooleanField(blank=True, default=False)),
                ('fecha_evaluacion_sedena', models.DateField(blank=True)),
                ('registro_estatal', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'NO REQUERIDO'), (2, 'EN TRÁMITE'), (3, 'ACEPTADO'), (4, 'RECHAZADO')])),
                ('fecha_registro_estatal', models.DateField(blank=True)),
                ('oficio_registro_estatal', models.CharField(blank=True, max_length=25)),
                ('verificacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'NO REQUERIDO'), (2, 'EN TRÁMITE'), (3, 'ACEPTADO'), (4, 'RECHAZADO')])),
                ('fecha_verificacion', models.DateField(blank=True)),
                ('registro_dgsp', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'NO REQUERIDO'), (2, 'EN TRÁMITE'), (3, 'ACEPTADO'), (4, 'RECHAZADO')])),
                ('fecha_registro_dgsp', models.DateField(blank=True)),
                ('oficio_registro_dgsp', models.CharField(blank=True, max_length=25)),
                ('registro_sedena', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'NO REQUERIDO'), (2, 'EN TRÁMITE'), (3, 'ACEPTADO'), (4, 'RECHAZADO')])),
                ('fecha_registro_sedena', models.DateField(blank=True)),
                ('oficio_registro_sedena', models.CharField(blank=True, max_length=25)),
                ('lic_part_col', models.CharField(blank=True, max_length=25)),
                ('comentarios', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Carpetas Laborales',
            },
        ),
        migrations.CreateModel(
            name='CarpetaReferencias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Carpeta Referencias',
            },
        ),
        migrations.CreateModel(
            name='CarpetasDependientes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vive_con_familia', models.BooleanField(blank=True, default=False)),
                ('cantidad_dependientes_economicos', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(999)])),
                ('cantidad_hijos', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(999)])),
            ],
            options={
                'verbose_name_plural': 'Carpeta Dependientes',
            },
        ),
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_comercial', models.CharField(blank=True, max_length=200)),
                ('razon_social', models.CharField(blank=True, max_length=200)),
                ('activo', models.BooleanField(blank=True, default=False)),
            ],
            options={
                'verbose_name_plural': 'Clientes',
            },
        ),
        migrations.CreateModel(
            name='ClienteGenerales',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reg_estatal', models.CharField(blank=True, max_length=30)),
                ('reg_federal', models.CharField(blank=True, max_length=30)),
                ('rfc', models.CharField(blank=True, max_length=13)),
                ('telefono_1', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('telefono_2', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('telefono_3', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('representante_legal', models.CharField(blank=True, max_length=300)),
                ('encargado_operativo', models.CharField(blank=True, max_length=300)),
                ('encargado_rh', models.CharField(blank=True, max_length=300)),
                ('coordinador', models.CharField(blank=True, max_length=300)),
                ('registro_patronal', models.CharField(blank=True, max_length=30)),
                ('cliente', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.cliente')),
            ],
            options={
                'verbose_name_plural': 'Clientes Generales',
            },
        ),
        migrations.CreateModel(
            name='ClientePagos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('encargado_pagos', models.CharField(blank=True, max_length=150)),
                ('telefono_oficina', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('telefono_celular', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('email', models.CharField(blank=True, max_length=200)),
                ('rfc', models.CharField(blank=True, max_length=13)),
                ('facturacion_tipo', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'QUINCENAL'), (2, 'MENSUAL'), (3, 'POR EVENTO')])),
                ('revision', models.CharField(blank=True, max_length=50)),
                ('pagos', models.CharField(blank=True, max_length=50)),
                ('factura_subtotal', models.DecimalField(blank=True, decimal_places=2, max_digits=10)),
                ('factura_iva', models.DecimalField(blank=True, decimal_places=2, max_digits=10)),
                ('factura_total', models.DecimalField(blank=True, decimal_places=2, max_digits=10)),
                ('cliente', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.cliente')),
            ],
            options={
                'verbose_name_plural': 'Clientes Pagos',
            },
        ),
        migrations.CreateModel(
            name='CodigoPostal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo_postal', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99999)])),
            ],
            options={
                'verbose_name_plural': 'Codigos Postales',
            },
        ),
        migrations.CreateModel(
            name='Colonia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('colonia', models.CharField(max_length=100)),
                ('codigo_postal', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='data.codigopostal')),
            ],
            options={
                'verbose_name_plural': 'Colonias',
            },
        ),
        migrations.CreateModel(
            name='Empleado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.cliente')),
            ],
            options={
                'verbose_name_plural': 'Empleados',
            },
        ),
        migrations.CreateModel(
            name='Estado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estado', models.CharField(max_length=100)),
                ('clave_estado_racek', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99)])),
            ],
            options={
                'verbose_name_plural': 'Estados',
            },
        ),
        migrations.CreateModel(
            name='Sede',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clave_sede', models.PositiveIntegerField(blank=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99999)])),
                ('nombre_sede', models.CharField(blank=True, max_length=100)),
                ('cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.cliente')),
            ],
            options={
                'verbose_name_plural': 'Sedes',
            },
        ),
        migrations.CreateModel(
            name='Rfc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rfc', models.CharField(blank=True, max_length=18, validators=[django.core.validators.RegexValidator('/^([A-ZÑ&]{3,4}) ?(?:- ?)?(\\d{2}(?:0[1-9]|1[0-2])(?:0[1-9]|[12]\\d|3[01])) ?(?:- ?)?([A-Z\\d]{2})([A\\d])$/', 'La CURP no es válida')])),
                ('rfc_digital', models.FileField(blank=True, unique=True, upload_to='temp/documentos')),
                ('razon_social', models.CharField(blank=True, max_length=255, null=True)),
                ('estatus', models.CharField(blank=True, max_length=20, null=True)),
                ('fecha_efectiva', models.DateField(blank=True, null=True)),
                ('correo_contacto', models.CharField(blank=True, max_length=200, null=True)),
                ('validez', models.CharField(blank=True, max_length=20, null=True)),
                ('tipo', models.CharField(blank=True, max_length=20, null=True)),
                ('empleado', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.empleado')),
            ],
            options={
                'verbose_name_plural': 'RFC',
            },
        ),
        migrations.CreateModel(
            name='Referencia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_referencia', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FAMILIAR CERCANO'), (2, 'PARIENTE CERCANO'), (3, 'PERSONAL'), (4, 'VECINAL'), (5, 'LABORAL')])),
                ('nombre', models.CharField(blank=True, max_length=100)),
                ('apellido_paterno', models.CharField(blank=True, max_length=100)),
                ('apellido_materno', models.CharField(blank=True, max_length=100)),
                ('sexo', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FEMENINO'), (2, 'MASCULINO'), (3, 'NO BINARIO')])),
                ('ocupacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ADMINISTRATIVO'), (2, 'AGRÍCOLA-GANADERO, SILVICULTURA Y PESCA'), (3, 'COMERCIANTE Y AGENTE DE VENTAS'), (4, 'DE LA EDUCACIÓN'), (5, 'DE SERVICIOS DOMÉSTICOS REMUNERADOS'), (6, 'DE SERVICIOS PERSONALES'), (7, 'DEL ARTE, ESPECTÁCULOS Y DEPORTES'), (8, 'EMPLEADO'), (9, 'ESTUDIANTE'), (10, 'FUNCIONARIO DEL SECTOR PRIVADO'), (11, 'FUNCIONARIO DEL SECTOR PÚBLICO'), (12, 'HOGAR'), (13, 'JEFES DE ACTIVIDADES ADMINISTRATIVAS'), (14, 'JUBILADO'), (15, 'NO TRABAJA'), (16, 'OBRERO'), (17, 'OPERADOR DE MÁQUINAS DE PRODUCCIÓN'), (18, 'OPERADOR DE TRANSPORTES'), (19, 'PERSONA CONTRATADA EN ACTIVIDADES INDUSTRIALES'), (20, 'PERSONA DE APOYO EN LA INDUSTRIA ARTESANAL'), (21, 'PROFESIONISTA'), (22, 'REPRESENTANTE LEGAL'), (23, 'SECRETARIA'), (24, 'SERVIDOR DE PROTECCIÓN Y VIGILANCIA'), (25, 'TÉCNICO'), (26, 'VENDEDOR AMBULANTE')])),
                ('parentesco', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ABUELO(A)'), (2, 'AHIJADO(A)'), (3, 'AMISTAD'), (4, 'AMOROSA'), (5, 'CÓNYUGE'), (6, 'CUÑADO(A)'), (7, 'ENTENADO(A)'), (8, 'HERMANO(A)'), (9, 'HIJO(A)'), (10, 'LABORAL'), (11, 'MADRE'), (12, 'MADRINA'), (13, 'NIETO(A)'), (14, 'PADRE'), (15, 'PADRINO'), (16, 'PRIMO(A)'), (17, 'SOBRINO(A)'), (18, 'SUEGRO(A)'), (19, 'TÍO(A)'), (20, 'YERNO O NUERA')])),
                ('tiempo_de_conocerse', models.CharField(blank=True, max_length=30)),
                ('direccion', models.CharField(blank=True, max_length=100)),
                ('codigo_postal', models.PositiveIntegerField(blank=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99999)])),
                ('telefono_contacto', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('opinion', models.TextField(blank=True)),
                ('carpeta_referencia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.carpetareferencias')),
            ],
            options={
                'verbose_name_plural': 'Referencias',
            },
        ),
        migrations.CreateModel(
            name='Puesto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_puesto', models.CharField(max_length=30)),
                ('carpeta_laboral', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to='data.carpetalaboral')),
            ],
            options={
                'verbose_name_plural': 'Puestos',
            },
        ),
        migrations.CreateModel(
            name='Pais',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pais', models.CharField(default='México', max_length=100)),
                ('clave_pais_racek', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999)])),
                ('estado', models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to='data.estado')),
            ],
            options={
                'verbose_name_plural': 'Paises',
            },
        ),
        migrations.CreateModel(
            name='Municipio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('municipio', models.CharField(max_length=100)),
                ('clave_municipio_racek', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9999)])),
                ('colonia', models.OneToOneField(null=True, on_delete=django.db.models.deletion.RESTRICT, to='data.colonia')),
            ],
            options={
                'verbose_name_plural': 'Municipios',
            },
        ),
        migrations.AddField(
            model_name='estado',
            name='municipio',
            field=models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to='data.municipio'),
        ),
        migrations.CreateModel(
            name='Domicilio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calle', models.CharField(blank=True, max_length=100)),
                ('numero_exterior', models.PositiveIntegerField(blank=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99999)])),
                ('numero_interior', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(-99), django.core.validators.MaxValueValidator(99999)])),
                ('entre_calle', models.CharField(blank=True, max_length=100, null=True)),
                ('y_calle', models.CharField(blank=True, max_length=100, null=True)),
                ('ciudad', models.CharField(blank=True, max_length=50)),
                ('cliente_generales', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='data.clientegenerales')),
                ('cliente_pagos', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='data.clientepagos')),
                ('empleado', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='data.empleado')),
                ('referencia', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='data.referencia')),
            ],
            options={
                'verbose_name_plural': 'Domicilios',
            },
        ),
        migrations.CreateModel(
            name='DocumentosDigitales',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hoja_datos', models.FileField(blank=True, upload_to='temp/documentos')),
                ('solicitud', models.ImageField(blank=True, upload_to='temp/documentos')),
                ('ine', models.ImageField(blank=True, upload_to='temp/documentos')),
                ('acta_nacimiento', models.ImageField(blank=True, upload_to='temp/documentos')),
                ('folio_acta_nacimiento', models.CharField(blank=True, max_length=20)),
                ('curp', models.FileField(blank=True, upload_to='temp/documentos')),
                ('comprobante_domicilio', models.ImageField(blank=True, upload_to='temp/documentos')),
                ('fecha_comprobante_domicilio', models.DateField(blank=True)),
                ('antecedentes_no_penales', models.ImageField(blank=True, upload_to='temp/documentos')),
                ('fecha_antecedentes_no_penales', models.DateField(blank=True)),
                ('comprobante_estudios', models.ImageField(blank=True, upload_to='temp/documentos')),
                ('cartilla_smn', models.ImageField(blank=True, upload_to='temp/documentos')),
                ('nss', models.FileField(blank=True, upload_to='temp/documentos')),
                ('carta_recomendacion', models.FileField(blank=True, upload_to='temp/documentos')),
                ('contrato', models.FileField(blank=True, upload_to='temp/documentos')),
                ('socioeconomico', models.FileField(blank=True, upload_to='temp/documentos')),
                ('fecha_socioeconomico', models.DateField(blank=True)),
                ('foto_socioeconomico', models.ImageField(blank=True, upload_to='temp/documentos')),
                ('psicologico', models.FileField(blank=True, upload_to='temp/documentos')),
                ('fecha_psicologico', models.DateField(blank=True)),
                ('medico', models.FileField(blank=True, upload_to='temp/documentos')),
                ('fecha_medico', models.DateField(blank=True)),
                ('toxicologico', models.FileField(blank=True, upload_to='temp/documentos')),
                ('fecha_toxicologico', models.DateField(blank=True)),
                ('fisico', models.FileField(blank=True, upload_to='temp/documentos')),
                ('fecha_fisico', models.DateField(blank=True)),
                ('croquis', models.ImageField(blank=True, upload_to='temp/documentos')),
                ('curriculum', models.FileField(blank=True, upload_to='temp/documentos')),
                ('empleado', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.empleado')),
            ],
            options={
                'verbose_name_plural': 'Documentos Personales',
            },
        ),
        migrations.CreateModel(
            name='Dependiente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(blank=True, max_length=100)),
                ('apellido_paterno', models.CharField(blank=True, max_length=100)),
                ('apellido_materno', models.CharField(blank=True, max_length=100)),
                ('sexo', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'FEMENINO'), (2, 'MASCULINO'), (3, 'NO BINARIO')])),
                ('fecha_nacimiento', models.DateField(blank=True)),
                ('parentesco', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ABUELO(A)'), (2, 'AHIJADO(A)'), (3, 'AMISTAD'), (4, 'AMOROSA'), (5, 'CÓNYUGE'), (6, 'CUÑADO(A)'), (7, 'ENTENADO(A)'), (8, 'HERMANO(A)'), (9, 'HIJO(A)'), (10, 'LABORAL'), (11, 'MADRE'), (12, 'MADRINA'), (13, 'NIETO(A)'), (14, 'PADRE'), (15, 'PADRINO'), (16, 'PRIMO(A)'), (17, 'SOBRINO(A)'), (18, 'SUEGRO(A)'), (19, 'TÍO(A)'), (20, 'YERNO O NUERA')])),
                ('actividad', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'HOGAR'), (2, 'ESTUDIANTE'), (3, 'INCAPACITADO'), (4, 'PENSIONADO'), (5, 'DESEMPLEADO')])),
                ('comentarios', models.TextField(blank=True)),
                ('carpeta_dependiente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.carpetasdependientes')),
            ],
            options={
                'verbose_name_plural': 'Dependientes',
            },
        ),
        migrations.CreateModel(
            name='Curp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('curp', models.CharField(blank=True, max_length=18, unique=True, validators=[django.core.validators.RegexValidator('^[A-Z]{1}[AEIOU]{1}[A-Z]{2}[0-9]{2}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])[HM]{1}(AS|BC|BS|CC|CS|CH|CL|CM|DF|DG|GT|GR|HG|JC|MC|MN|MS|NT|NL|OC|PL|QT|QR|SP|SL|SR|TC|TS|TL|VZ|YN|ZS|NE)[B-DF-HJ-NP-TV-Z]{3}[0-9A-Z]{1}[0-9]{1}$', 'La CURP no es válida')])),
                ('nombre', models.CharField(blank=True, max_length=100, null=True)),
                ('apellido_paterno', models.CharField(blank=True, max_length=100, null=True)),
                ('apellido_materno', models.CharField(blank=True, max_length=100, null=True)),
                ('iniciales', models.CharField(blank=True, max_length=20)),
                ('fecha_nacimiento', models.DateField(blank=True, null=True)),
                ('edad', models.PositiveIntegerField(blank=True, null=True)),
                ('anio_registro', models.PositiveIntegerField(blank=True, null=True)),
                ('numero_acta', models.CharField(blank=True, max_length=20, null=True)),
                ('validacion_renapo', models.BooleanField(blank=True, default=False, null=True)),
                ('sexo', models.CharField(blank=True, max_length=1, null=True)),
                ('estatus_curp', models.CharField(blank=True, max_length=20, null=True)),
                ('clave_municipio_registro', models.CharField(blank=True, max_length=5, null=True)),
                ('municipio_registro', models.CharField(blank=True, max_length=100, null=True)),
                ('clave_entidad_registro', models.CharField(blank=True, max_length=5, null=True)),
                ('entidad_registro', models.CharField(blank=True, max_length=100, null=True)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('empleado', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.empleado')),
            ],
        ),
        migrations.AddField(
            model_name='codigopostal',
            name='domicilio',
            field=models.OneToOneField(on_delete=django.db.models.deletion.RESTRICT, to='data.domicilio'),
        ),
        migrations.CreateModel(
            name='ClienteContactos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_contacto', models.CharField(blank=True, max_length=300)),
                ('telefono_1', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('telefono_2', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('telefono_3', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('puesto', models.CharField(blank=True, max_length=30)),
                ('email_1', models.CharField(blank=True, max_length=200)),
                ('email_2', models.CharField(blank=True, max_length=200)),
                ('cliente', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.cliente')),
            ],
            options={
                'verbose_name_plural': 'Clientes Contactos',
            },
        ),
        migrations.AddField(
            model_name='carpetasdependientes',
            name='empleado',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.empleado'),
        ),
        migrations.AddField(
            model_name='carpetareferencias',
            name='empleado',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.empleado'),
        ),
        migrations.AddField(
            model_name='carpetalaboral',
            name='empleado',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.empleado'),
        ),
        migrations.CreateModel(
            name='CarpetaGenerales',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_empleado', models.CharField(blank=True, max_length=200)),
                ('telefono_domicilio', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('telefono_celular', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('telefono_recados', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('numero_elemento', models.PositiveIntegerField(blank=True)),
                ('transporte', models.CharField(blank=True, max_length=50)),
                ('tiempo_trayecto', models.PositiveIntegerField(blank=True, help_text='Ingrese el tiempo en minutos', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1440)])),
                ('estado_civil', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'SOLTERO(A)'), (2, 'CASADO(A)'), (3, 'VIUDO(A)'), (4, 'DIVORCIADO(A)'), (5, 'UNIÓN LIBRE O CONCUBINATO')])),
                ('estado_cartilla', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'PRE-CARTILLA'), (2, 'LIBERADA'), (3, 'NO APLICA'), (4, 'PRESENTÓ')])),
                ('clave_cartilla', models.CharField(blank=True, max_length=18)),
                ('cuip', models.CharField(blank=True, max_length=20)),
                ('clave_ine', models.CharField(blank=True, max_length=20)),
                ('folio', models.CharField(blank=True, max_length=20)),
                ('nss', models.CharField(blank=True, max_length=15)),
                ('pasaporte', models.CharField(blank=True, max_length=20)),
                ('escolaridad', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'SIN ESCOLARIDAD'), (2, 'PRIMARIA INCOMPLETA'), (3, 'PRIMARIA COMPLETA'), (4, 'SECUNDARIA INCOMPLETA'), (5, 'SECUNDARIA COMPLETA'), (6, 'CARRERA TÉCNICA INCOMPLETA'), (7, 'CARRERA TÉCNICA COMPLETA'), (8, 'BACHILLERATO INCOMPLETA'), (9, 'BACHILLERATO COMPLETA'), (10, 'LICENCIATURA INCOMPLETA'), (11, 'LICENCIATURA COMPLETA'), (12, 'ESPECIALIDAD INCOMPLETA'), (13, 'ESPECIALIDAD COMPLETA'), (14, 'MAESTRÍA INCOMPLETA'), (15, 'MAESTRÍA COMPLETA'), (16, 'DOCTORADO INCOMPLETA'), (17, 'DOCTORADO COMPLETA'), (18, 'ANALFABETO(A)')])),
                ('escuela', models.CharField(blank=True, max_length=200)),
                ('especialidad_escuela', models.CharField(blank=True, max_length=50)),
                ('cedula_profesional', models.CharField(blank=True, max_length=20)),
                ('registro_sep', models.BooleanField(blank=True, default=False)),
                ('anio_inicio_escolaridad', models.DateField(blank=True)),
                ('anio_termino_escolaridad', models.DateField(blank=True)),
                ('comprobante_estudios', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'NINGUNO'), (2, 'BOLETA'), (3, 'DIPLOMA'), (4, 'CONSTANCIA'), (5, 'CERTIFICADO'), (6, 'TÍTULO')])),
                ('folio_certificado', models.CharField(blank=True, max_length=20)),
                ('promedio', models.DecimalField(blank=True, decimal_places=2, max_digits=3)),
                ('antecedentes', models.PositiveSmallIntegerField(blank=True, choices=[(1, '1ER EMPLEO'), (2, 'SIN EXPERIENCIA EN SEGURIDAD PRIVADA'), (3, 'EXPERIENCIA EN SEGURIDAD PRIVADA'), (4, 'MILITAR CON BAJA'), (5, 'MILITAR RETIRADO'), (6, 'EX-POLICÍA')])),
                ('sabe_conducir', models.BooleanField(blank=True, default=False)),
                ('licencia_conducir', models.CharField(blank=True, max_length=20)),
                ('complexion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DELGADA'), (2, 'REGULAR'), (3, 'ROBUSTA'), (4, 'ATLÉTICA'), (5, 'OBESA')])),
                ('color_piel', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ALBINO'), (2, 'BLANCO'), (3, 'AMARILLO'), (4, 'MORENO CLARO'), (5, 'MORENO'), (6, 'MORENO OSCURO'), (7, 'NEGRO'), (8, 'OTRO')])),
                ('cara', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ALARGADA'), (2, 'CUADRADA'), (3, 'OVALADA'), (4, 'REDONDA')])),
                ('sangre', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'NO SABE'), (2, 'A'), (3, 'B'), (4, 'O'), (5, 'AB')])),
                ('rh', models.PositiveSmallIntegerField(blank=True, choices=[(1, '-'), (2, '+')])),
                ('peso', models.DecimalField(blank=True, decimal_places=2, max_digits=3)),
                ('estatura', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(400)])),
                ('alergias', models.CharField(blank=True, max_length=30)),
                ('inicio_trabajo', models.DateField(blank=True)),
                ('fin_trabajo', models.DateField(blank=True)),
                ('empleado', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.empleado')),
            ],
            options={
                'verbose_name_plural': 'Carpetas Generales',
            },
        ),
        migrations.CreateModel(
            name='CarpetaExamenToxicologico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_examen', models.DateField(auto_now=True)),
                ('cocaina', models.BooleanField(blank=True, default=False)),
                ('marihuana', models.BooleanField(blank=True, default=False)),
                ('opiaceos', models.BooleanField(blank=True, default=False)),
                ('anfetaminas', models.BooleanField(blank=True, default=False)),
                ('metanfetaminas', models.BooleanField(blank=True, default=False)),
                ('barbituricos', models.BooleanField(blank=True, default=False)),
                ('benzodiacepinas', models.BooleanField(blank=True, default=False)),
                ('resultado_toxicologico', models.BooleanField(blank=True, default=False)),
                ('observacion', models.TextField(blank=True)),
                ('empleado', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.empleado')),
            ],
            options={
                'verbose_name_plural': 'Carpeta Examen Toxicológico',
            },
        ),
        migrations.CreateModel(
            name='CarpetaExamenSocioeconomico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('propiedades', models.CharField(blank=True, max_length=200)),
                ('inversiones', models.CharField(blank=True, max_length=200)),
                ('vehiculo', models.CharField(blank=True, max_length=200)),
                ('tarjetas_credito_departamental', models.CharField(blank=True, max_length=200)),
                ('adeudos_importantes', models.CharField(blank=True, max_length=200)),
                ('tipo_domicilio', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'PROPIO'), (2, 'RENTADO'), (3, 'HIPOTECADO'), (4, 'PRESTADO'), (5, 'FAMILIAR')])),
                ('titular_domicilio', models.CharField(blank=True, max_length=300)),
                ('tipo_vivienda', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'CASA SOLA'), (2, 'DEPARTAMENTO'), (3, 'VECINDAD'), (4, 'CAMPAMENTO'), (5, 'ALBERGUE')])),
                ('anios_residencia', models.CharField(blank=True, max_length=10)),
                ('niveles', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(-99), django.core.validators.MaxValueValidator(999)])),
                ('cuartos', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99999)])),
                ('banos', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(999)])),
                ('patios', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(999)])),
                ('material_paredes', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'TABIQUE'), (2, 'MADERA'), (3, 'CARTÓN'), (4, 'OTROS')])),
                ('material_pisos', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'MOZAICO'), (2, 'LOSETA'), (3, 'CEMENTO'), (4, 'TIERRA APISONADA')])),
                ('material_techos', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'CONCRETO'), (2, 'LÁMINA DE ASBESTO'), (3, 'CARTÓN'), (4, 'LÁMINA METÁLICA')])),
                ('mobiliario_vivienda', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'SENCILLO'), (2, 'RUSTICO'), (3, 'MODERNO')])),
                ('television', models.BooleanField(blank=True, default=False)),
                ('estereo', models.BooleanField(blank=True, default=False)),
                ('dvd', models.BooleanField(blank=True, default=False)),
                ('estufa', models.BooleanField(blank=True, default=False)),
                ('horno_microondas', models.BooleanField(blank=True, default=False)),
                ('lavadora', models.BooleanField(blank=True, default=False)),
                ('refrigerador', models.BooleanField(blank=True, default=False)),
                ('computadora', models.BooleanField(blank=True, default=False)),
                ('internet', models.BooleanField(blank=True, default=False)),
                ('tv_paga', models.BooleanField(blank=True, default=False)),
                ('gasto_diario', models.DecimalField(blank=True, decimal_places=2, max_digits=10)),
                ('ingreso_familiar_adicional', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('importe_ingreso_interesado', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('familiar_1', models.CharField(max_length=35)),
                ('ingreso_familiar_1', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('familiar_2', models.CharField(max_length=35)),
                ('ingreso_familiar_2', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('familiar_3', models.CharField(max_length=35)),
                ('ingreso_familiar_3', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('familiar_4', models.CharField(max_length=35)),
                ('ingreso_familiar_4', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('total_ingresos', models.DecimalField(blank=True, decimal_places=2, default=data.models.CarpetaExamenSocioeconomico.obtener_total_ingresos, max_digits=10)),
                ('egresos_alimentacion', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('egresos_renta', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('egresos_agua', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('egresos_electricidad', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('egresos_gas', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('egresos_telefono', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('egresos_transporte', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('egresos_educacion', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('egresos_adeudos', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('egresos_otros', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('total_egresos', models.DecimalField(blank=True, decimal_places=2, default=data.models.CarpetaExamenSocioeconomico.obtener_total_egresos, max_digits=10)),
                ('salud_alergias', models.CharField(blank=True, max_length=100)),
                ('salud_visual_auditiva_fisica', models.CharField(blank=True, max_length=100)),
                ('salud_cirugias', models.CharField(blank=True, max_length=100)),
                ('salud_enfermedad_cronica', models.CharField(blank=True, max_length=100)),
                ('cigarro', models.BooleanField(blank=True, default=False)),
                ('cantidad_frecuencia_ciqarro', models.CharField(blank=True, max_length=100)),
                ('alcohol', models.BooleanField(blank=True, default=False)),
                ('cantidad_frecuencia_alcohol', models.CharField(blank=True, max_length=100)),
                ('vicios', models.CharField(blank=True, max_length=100)),
                ('atencion_medica_familiares', models.BooleanField(blank=True, default=False)),
                ('at_medica_observaciones', models.CharField(blank=True, max_length=100)),
                ('estado_salud_propio', models.CharField(blank=True, max_length=100)),
                ('ultima_vez_enfermo', models.CharField(blank=True, max_length=100)),
                ('embarazada', models.CharField(blank=True, max_length=100)),
                ('contacto_emergencia', models.CharField(blank=True, max_length=100)),
                ('telefono_emergencia', models.CharField(blank=True, help_text='Ingrese número telefónico a 10 dígitos', max_length=17, validators=[django.core.validators.RegexValidator(message='El número telefónico debe ser ingresado de la siguiente manera: "5512345678". Limitado a 10 dígitos.', regex='^\\+?1?\\d{9,10}$')])),
                ('parentesco_contacto', models.CharField(blank=True, max_length=100)),
                ('actividates_fin_semana', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'PRACTICAR DEPORTE'), (2, 'VER TELEVISIÓN'), (3, 'IR AL CINE'), (4, 'VISITAR FAMILIARES'), (5, 'ACTIVIDAD AL AIRE LIBRE'), (6, 'REALIZAR QUEHACERES DEL HOGAR')])),
                ('actividades_culturales_deportes', models.CharField(blank=True, max_length=100)),
                ('estudia', models.BooleanField(blank=True, default=False)),
                ('que_estudia', models.CharField(blank=True, max_length=100)),
                ('organizacion_familia', models.CharField(blank=True, max_length=100)),
                ('comunicacion', models.CharField(blank=True, max_length=100)),
                ('roles', models.CharField(blank=True, max_length=100)),
                ('autoridad', models.CharField(blank=True, max_length=100)),
                ('limites', models.CharField(blank=True, max_length=100)),
                ('calidad_vida', models.CharField(blank=True, max_length=100)),
                ('imagen_publica', models.CharField(blank=True, max_length=100)),
                ('comportamiento_social', models.CharField(blank=True, max_length=100)),
                ('demanda_laboral', models.CharField(blank=True, max_length=100)),
                ('antecedentes_penales', models.CharField(blank=True, max_length=100)),
                ('porque_este_empleo', models.CharField(blank=True, max_length=200)),
                ('puesto_deseado', models.CharField(blank=True, max_length=100)),
                ('area_deseada', models.CharField(blank=True, max_length=100)),
                ('tiempo_ascenso', models.CharField(blank=True, max_length=100)),
                ('obtencion_reconocimiento', models.CharField(blank=True, max_length=100)),
                ('obtencion_ascenso', models.CharField(blank=True, max_length=100)),
                ('capacitacion_deseada', models.CharField(blank=True, max_length=100)),
                ('fecha_entrevista', models.DateField(blank=True)),
                ('empleado', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.empleado')),
            ],
            options={
                'verbose_name_plural': 'Carpeta Examen Socioeconómico',
            },
        ),
        migrations.CreateModel(
            name='CarpetaExamenPsicologico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_examen', models.DateField(auto_now=True)),
                ('actitud', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('inteligencia', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('personalidad', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('impulsividad', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('organizacion', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('valores', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('temperamento', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('confiabilidad', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('compromiso', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('habilidades_laborales', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'DEFICIENTE'), (2, 'BUENO'), (3, 'EXCELENTE')])),
                ('resultado_psicologico', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'NO APTO'), (2, 'APTO BAJO RESERVA'), (3, 'APTO')])),
                ('observacion', models.TextField(blank=True)),
                ('empleado', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.empleado')),
            ],
            options={
                'verbose_name_plural': 'Carpeta Examen Psicológico',
            },
        ),
        migrations.CreateModel(
            name='CarpetaExamenMedico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_examen', models.DateField(blank=True)),
                ('medico_agudeza_visual', models.CharField(blank=True, max_length=100)),
                ('medico_agudeza_auditiva', models.CharField(blank=True, max_length=100)),
                ('medico_agudeza_motriz', models.CharField(blank=True, max_length=100)),
                ('medico_estado_nutricional', models.CharField(blank=True, max_length=100)),
                ('medico_diagnostico_musculo_esqueletico', models.CharField(blank=True, max_length=100)),
                ('medico_cardiologico', models.CharField(blank=True, max_length=100)),
                ('medico_pulmonar', models.CharField(blank=True, max_length=100)),
                ('medico_odontologico', models.CharField(blank=True, max_length=100)),
                ('medico_resultado', models.CharField(blank=True, max_length=100)),
                ('ishihara_visual_oi', models.CharField(blank=True, max_length=10)),
                ('ishihara_visual_od', models.CharField(blank=True, max_length=10)),
                ('ishihara_visual_ao', models.CharField(blank=True, max_length=10)),
                ('ishihara_lentes', models.CharField(blank=True, max_length=10)),
                ('ishihara_deuteranopia', models.CharField(blank=True, max_length=30)),
                ('ishihara_protanopia', models.CharField(blank=True, max_length=30)),
                ('ishihara_tritanopia', models.CharField(blank=True, max_length=30)),
                ('ishihara_acromatopsia', models.CharField(blank=True, max_length=30)),
                ('ishihara_resultado', models.CharField(blank=True, max_length=100)),
                ('observacion', models.TextField(blank=True)),
                ('empleado', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.empleado')),
            ],
            options={
                'verbose_name_plural': 'Carpeta Examen Médico',
            },
        ),
        migrations.CreateModel(
            name='CarpetaExamenFisico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_examen', models.DateField(blank=True)),
                ('elasticidad', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('velocidad', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('resistencia', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('condicion_fisica', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('reflejos', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('locomocion', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('prueba_esfuerzo', models.PositiveIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('resultado', models.CharField(max_length=100)),
                ('observacion', models.TextField(blank=True)),
                ('empleado', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data.empleado')),
            ],
            options={
                'verbose_name_plural': 'Carpeta Examen Físico',
            },
        ),
    ]
